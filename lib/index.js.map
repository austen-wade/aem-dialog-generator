{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/AemNode.ts", "../src/types.ts", "../src/fields/Checkbox.ts", "../src/fields/Container.ts", "../src/fields/DatePicker.ts", "../src/fields/Field.ts", "../src/fields/FileUpload.ts", "../src/fields/FixedColumns.ts", "../src/fields/JcrRoot.ts", "../src/fields/Multifield.ts", "../src/fields/NumberField.ts", "../src/fields/PathBrowser.ts", "../src/fields/PathField.ts", "../src/fields/RadioGroup.ts", "../src/fields/Select.ts", "../src/fields/SelectOption.ts", "../src/fields/Tabs.ts", "../src/fields/Textarea.ts", "../src/fields/TextField.ts", "../src/generate.ts"],
  "sourcesContent": ["export function formatXml(xml: string) {\n    let formatted = \"\";\n    const reg = /(>)(<)(\\/*)/g;\n    xml = xml.replace(reg, \"$1\\r\\n$2$3\");\n    let pad = 0;\n\n    xml.split(\"\\r\\n\").forEach(function (node) {\n        let indent = 0;\n        if (node.match(/.+<\\/\\w[^>]*>$/)) {\n            indent = 0;\n        } else if (node.match(/^<\\/\\w/)) {\n            if (pad != 0) {\n                pad -= 1;\n            }\n        } else if (node.match(/^<\\w[^>]*[^\\/]>.*$/)) {\n            indent = 1;\n        } else {\n            indent = 0;\n        }\n\n        let padding = \"\";\n        for (let i = 0; i < pad; i++) {\n            padding += \"  \";\n        }\n\n        formatted += padding + node + \"\\r\\n\";\n        pad += indent;\n    });\n\n    return formatted;\n}\n\nexport function getName(name: string) {\n    if (name.startsWith(\"./\")) {\n        return name;\n    }\n\n    return `./${name}`;\n}\n\nexport function aembool(b: boolean): string {\n    if (b) {\n        return \"{Boolean}true\";\n    }\n\n    return \"{Boolean}false\";\n}\n", "import { Prop } from \"./types\";\nimport { aembool, getName } from \"./utils\";\n\nexport interface BaseOptions {\n    \"granite:class\"?: string;\n}\n\nexport class AemNode {\n    readonly tag: string;\n    props: Prop[];\n    readonly children: AemNode[] = [];\n\n    constructor(tag: string, resourceType?: string, props?: Prop[]) {\n        this.props = props || [];\n        this.addProp(\"jcr:primaryType\", \"nt:unstructured\");\n        this.addProp(\"sling:resourceType\", resourceType);\n        this.tag = tag;\n    }\n\n    child(child: AemNode): AemNode {\n        this.children.push(child);\n\n        return this;\n    }\n\n    addProp(field: string, value: any) {\n        if (typeof value !== undefined) {\n            if (typeof value === \"boolean\") {\n                value = aembool(value);\n            } else if (field === \"name\") {\n                value = getName(value);\n            } else if (Array.isArray(value)) {\n                value = value.join(\", \");\n            }\n            this.props.push({ field: field, value: value });\n        }\n    }\n\n    xml(isRoot?: boolean): string {\n        let attributesString = \"\";\n\n        for (const prop of this.props) {\n            if (!prop.value) {\n                continue;\n            }\n            attributesString += ` ${prop.field}=\"${prop.value}\"`;\n        }\n\n        let output = `<${this.tag}${attributesString}`;\n        if (isRoot) {\n            output = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" + output;\n        }\n        if (this.children.length) {\n            output += \">\";\n            for (const child of this.children) {\n                output += `${child.xml(false)}`;\n            }\n            output += `</${this.tag}>`;\n        } else {\n            output += \"/>\";\n        }\n\n        return output;\n    }\n\n    /* TODO: Items should not allow duplicate items */\n    items(children?: AemNode[]): AemNode {\n        const items = new AemNode(\"items\");\n        this.child(items);\n\n        children?.forEach((c) => items.child(c));\n\n        return this;\n    }\n}\n", "export enum ResourceType {\n    DIALOG = \"cq/gui/components/authoring/dialog\",\n    TEXTFIELD = \"granite/ui/components/coral/foundation/form/textfield\",\n    CONTAINER = \"granite/ui/components/coral/foundation/container\",\n    FIXED_COLUMNS = \"granite/ui/components/coral/foundation/fixedcolumns\",\n    TABS = \"granite/ui/components/coral/foundation/tabs\",\n    CHECKBOX = \"granite/ui/components/coral/foundation/form/checkbox\",\n    PATH_FIELD = \"granite/ui/components/coral/foundation/form/pathfield\",\n    DATE_PICKER = \"granite/ui/components/coral/foundation/form/datepicker\",\n    FILE_UPLOAD = \"cq/gui/components/authoring/dialog/fileupload\",\n    NUMBER_FIELD = \"granite/ui/components/coral/foundation/form/numberfield\",\n    PATH_BROWSER = \"granite/ui/components/coral/foundation/form/pathbrowser\",\n    TEXTAREA = \"granite/ui/components/coral/foundation/form/textarea\",\n    SELECT = \"granite/ui/components/coral/foundation/form/select\",\n    FIELD = \"granite/ui/components/coral/foundation/form/field\",\n    MULTIFIELD = \"granite/ui/components/coral/foundation/form/multifield\",\n    RADIO_GROUP = \"granite/ui/components/coral/foundation/form/radiogroup\",\n}\n\nexport type Prop = {\n    field: string;\n    value: any;\n};\n\nexport type Attributes = Record<string, string>;\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface CheckboxOptions extends FieldOptions {\n    name: string;\n    text?: string;\n    required?: boolean;\n    checked?: boolean;\n    value?: string;\n    uncheckedValue?: string;\n}\n\nexport class Checkbox extends AemNode {\n    constructor(tag = \"checkbox\", options?: CheckboxOptions) {\n        super(tag, ResourceType.CHECKBOX);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof CheckboxOptions]);\n        }\n    }\n}\n", "import { AemNode, BaseOptions } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\n\nexport interface ContainerOptions extends BaseOptions {\n    margin?: boolean;\n    maximized?: boolean;\n    \"granite:class\"?: string;\n}\nexport class Container extends AemNode {\n    constructor(tag = \"container\", options?: ContainerOptions) {\n        super(tag, ResourceType.CONTAINER);\n        for (const key in options) {\n            this.addProp(key, options[key as keyof ContainerOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface DatePickerOptions extends FieldOptions {\n    displayedFormat: string;\n    disabled?: boolean;\n    fieldLabel?: string;\n    fieldDescription?: string;\n    type: string;\n    typeHint: string;\n}\nexport class DatePicker extends AemNode {\n    options: DatePickerOptions = {\n        displayedFormat: \"MM-DD-YYYY HH:mm\",\n        type: \"datetime\",\n        typeHint: \"Date\",\n    };\n\n    constructor(tag = \"datepicker\", options?: DatePickerOptions) {\n        super(tag, ResourceType.DATE_PICKER);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof DatePickerOptions]);\n        }\n    }\n}\n", "import { AemNode, BaseOptions } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\n\nexport interface FieldOptions extends BaseOptions {\n    name?: string;\n    fieldLabel?: string;\n    fieldDescription?: string;\n    renderHidden?: boolean;\n    wrapperClass?: string;\n    tooltipPosition?: \"left\" | \"top\" | \"bottom\";\n    \"granite:class\"?: string;\n}\n\n/**\n * Base class for form components.\n * Should not be confused with the commonly seen \"field\" node that uses sling:resourceType=\"granite/ui/components/coral/foundation/container\"\n *\n * @date 9/22/2022 - 8:36:00 PM\n *\n * @export\n * @class Field\n * @typedef {Field}\n * @extends {AemNode}\n */\nexport class Field extends AemNode {\n    options: FieldOptions = { name: \"columns\" };\n\n    constructor(tag: string, options?: FieldOptions) {\n        super(tag, ResourceType.FIELD);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof FieldOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ButtonSize, ButtonVariants, GraniteIcon, IconSize } from \"../icons\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface FileUploadOptions extends FieldOptions {\n    emptyText?: string;\n    disabled?: boolean;\n    required?: boolean;\n    async?: boolean;\n    multiple?: boolean;\n    sizeLimit?: number;\n    mimeTypes?: string;\n    text?: string;\n    hideText?: boolean;\n    icon?: GraniteIcon;\n    iconSize?: IconSize;\n    size?: ButtonSize;\n    variant?: ButtonVariants;\n    allowUpload?: boolean;\n    fileNameParameter?: string;\n    fileReferenceParameter?: string;\n    title?: string;\n    uploadUrl?: string;\n    useHTML5?: boolean;\n    autoStart?: boolean;\n    class?: string;\n}\nexport class FileUpload extends AemNode {\n    options: FileUploadOptions = {};\n\n    constructor(tag = \"fileupload\", options?: FileUploadOptions) {\n        super(tag, ResourceType.FILE_UPLOAD);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof FileUploadOptions]);\n        }\n    }\n}\n", "import { AemNode, BaseOptions } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\n\nexport interface FixedColumnsOptions extends BaseOptions {\n    margin?: boolean;\n    maximized?: boolean;\n}\nexport class FixedColumns extends AemNode {\n    options: FixedColumnsOptions = {};\n\n    constructor(tag = \"columns\", options?: FixedColumnsOptions) {\n        super(tag, ResourceType.FIXED_COLUMNS);\n        for (const key in options) {\n            this.addProp(key, options[key as keyof FixedColumnsOptions]);\n        }\n    }\n}\n", "import { AemNode, BaseOptions } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\n\nexport type JcrRootOptions = BaseOptions;\nexport class JcrRoot extends AemNode {\n    options: JcrRootOptions = {};\n\n    constructor(options?: JcrRootOptions) {\n        super(\"jcr:root\", ResourceType.DIALOG, [\n            { field: \"xmlns:cq\", value: \"http://www.day.com/jcr/cq/1.0\" },\n            {\n                field: \"xmlns:granite\",\n                value: \"http://www.adobe.com/jcr/granite/1.0\",\n            },\n            { field: \"xmlns:jcr\", value: \"http://www.jcp.org/jcr/1.0\" },\n            { field: \"xmlns:nt\", value: \"http://www.jcp.org/jcr/nt/1.0\" },\n            {\n                field: \"xmlns:sling\",\n                value: \"http://sling.apache.org/jcr/sling/1.0\",\n            },\n        ]);\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof JcrRootOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface MultifieldOptions extends FieldOptions {\n    composite?: boolean;\n    deleteHint?: boolean;\n    typeHint?: string;\n    required?: boolean;\n    validation?: string;\n}\nexport class Multifield extends AemNode {\n    options: MultifieldOptions = {};\n\n    constructor(tag = \"multifield\", options?: MultifieldOptions) {\n        super(tag, ResourceType.MULTIFIELD);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof MultifieldOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface NumberFieldOptions extends FieldOptions {\n    value?: string;\n    disabled?: boolean;\n    typeHint?: string;\n    required?: boolean;\n    min?: number;\n    max?: number;\n    step: number;\n}\nexport class NumberField extends AemNode {\n    options: NumberFieldOptions = { step: 1 };\n\n    constructor(tag = \"numberfield\", options?: NumberFieldOptions) {\n        super(tag, ResourceType.NUMBER_FIELD);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof NumberFieldOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface PathBrowserOptions extends FieldOptions {\n    rootPath: string;\n    required?: boolean;\n}\nexport class PathBrowser extends AemNode {\n    options: PathBrowserOptions = { rootPath: \"/content\" };\n\n    constructor(tag = \"pathbrowser\", options?: PathBrowserOptions) {\n        super(tag, ResourceType.PATH_BROWSER);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof PathBrowserOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface PathFieldOptions extends FieldOptions {\n    rootPath: string;\n    emptyText?: string;\n    disabled?: boolean;\n    required?: boolean;\n    multiple?: boolean;\n    nodeTypes?: string | string[];\n    forceSelection?: boolean;\n}\nexport class PathField extends AemNode {\n    options: PathFieldOptions = { rootPath: \"/content\" };\n\n    constructor(tag = \"pathfield\", options?: PathFieldOptions) {\n        super(tag, ResourceType.PATH_FIELD);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof PathFieldOptions]);\n        }\n    }\n}\n", "import { AemNode, BaseOptions } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface RadioGroupOptions extends BaseOptions {\n    name?: string;\n    composite?: boolean;\n    deleteHint?: boolean;\n    ignoreData?: boolean;\n    required?: boolean;\n    validation?: string;\n    vertical?: boolean;\n}\nexport class RadioGroup extends AemNode {\n    options: RadioGroupOptions = {};\n\n    constructor(tag = \"radiogroup\", options?: RadioGroupOptions) {\n        super(tag, ResourceType.RADIO_GROUP);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof RadioGroupOptions]);\n        }\n    }\n}\n\nexport interface RadioGroupItemOptions extends FieldOptions {\n    value?: string;\n    disabled?: boolean;\n    checked?: boolean;\n    text?: string;\n    wrapperClass?: string;\n}\nexport class RadioGroupItem extends AemNode {\n    options: RadioGroupItemOptions = {};\n\n    constructor(tag = \"radiogroupitem\", options?: RadioGroupItemOptions) {\n        super(tag, \"\");\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof RadioGroupItemOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport type SelectOptions = FieldOptions;\nexport class Select extends AemNode {\n    options: SelectOptions = {};\n\n    constructor(tag = \"select\", options?: SelectOptions) {\n        super(tag, ResourceType.SELECT);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof SelectOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\n\nexport interface SelectOptionOptions {\n    text: string;\n    value: string;\n}\nexport class SelectOption extends AemNode {\n    options: SelectOptionOptions = {\n        text: \"Item\",\n        value: \"item\",\n    };\n\n    constructor(tag = \"item\", options?: SelectOptionOptions) {\n        super(tag, \"\");\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof SelectOptionOptions]);\n        }\n    }\n}\n", "import { AemNode, BaseOptions } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { ContainerOptions } from \"./Container\";\n\nexport type TabsOptions = BaseOptions;\n\nexport class DialogTabs extends AemNode {\n    options: TabsOptions = {};\n\n    constructor(tag = \"tabs\", options?: TabsOptions) {\n        super(tag, ResourceType.TABS);\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof TabsOptions]);\n        }\n    }\n}\n\nexport type TabOptions = ContainerOptions;\n\nexport class Tab extends AemNode {\n    options: TabOptions = {};\n\n    constructor(tag = \"tab\", options?: TabOptions) {\n        super(tag, ResourceType.CONTAINER);\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof TabOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface TextareaOptions extends FieldOptions {\n    value?: string;\n    emptyText?: string;\n    disabled?: boolean;\n    required?: boolean;\n    autocomplete?: \"off\" | \"on\";\n    autofocus?: boolean;\n    maxlength?: number;\n    cols?: number;\n    rows?: number;\n    resize?: \"none\" | \"both\" | \"horizontal\" | \"vertical\";\n}\nexport class Textarea extends AemNode {\n    options: TextareaOptions = {};\n\n    constructor(tag = \"textarea\", options?: TextareaOptions) {\n        super(tag, ResourceType.TEXTAREA);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof TextareaOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface TextFieldOptions extends FieldOptions {\n    emptyText?: string;\n    required?: boolean;\n}\n\nexport class TextField extends AemNode {\n    options: TextFieldOptions = {};\n\n    constructor(tag = \"text\", options?: TextFieldOptions) {\n        super(tag, ResourceType.TEXTFIELD);\n\n        if (options && !options.name) {\n            options.name = tag;\n        }\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof TextFieldOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"./AemNode\";\nimport { formatXml } from \"./utils\";\nimport { existsSync, mkdirSync, writeFileSync } from \"fs\";\n\nexport function generate(dirPath: string, xml: AemNode) {\n    let output = xml.xml(true);\n    output = formatXml(output);\n\n    if (!existsSync(dirPath)) {\n        mkdirSync(dirPath, { recursive: true });\n    }\n    writeFileSync(`${dirPath}/.content.xml`, output, {});\n}\n"],
  "mappings": "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",
  "names": ["formatXml", "xml", "formatted", "reg", "pad", "node", "indent", "padding", "i", "getName", "name", "aembool", "b", "AemNode", "tag", "resourceType", "props", "child", "field", "value", "aembool", "getName", "isRoot", "attributesString", "prop", "output", "children", "items", "c", "ResourceType", "Checkbox", "AemNode", "tag", "options", "key", "Container", "AemNode", "tag", "options", "key", "DatePicker", "AemNode", "tag", "options", "key", "Field", "AemNode", "tag", "options", "key", "FileUpload", "AemNode", "tag", "options", "key", "FixedColumns", "AemNode", "tag", "options", "key", "JcrRoot", "AemNode", "options", "key", "Multifield", "AemNode", "tag", "options", "key", "NumberField", "AemNode", "tag", "options", "key", "PathBrowser", "AemNode", "tag", "options", "key", "PathField", "AemNode", "tag", "options", "key", "RadioGroup", "AemNode", "tag", "options", "key", "RadioGroupItem", "Select", "AemNode", "tag", "options", "key", "SelectOption", "AemNode", "tag", "options", "key", "DialogTabs", "AemNode", "tag", "options", "key", "Tab", "Textarea", "AemNode", "tag", "options", "key", "TextField", "AemNode", "tag", "options", "key", "existsSync", "mkdirSync", "writeFileSync", "generate", "dirPath", "xml", "output", "formatXml"]
}
