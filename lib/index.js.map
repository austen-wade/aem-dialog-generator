{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/AemNode.ts", "../src/types.ts", "../src/generate.ts"],
  "sourcesContent": ["export function formatXml(xml: string) {\n    let formatted = \"\";\n    const reg = /(>)(<)(\\/*)/g;\n    xml = xml.replace(reg, \"$1\\r\\n$2$3\");\n    let pad = 0;\n\n    xml.split(\"\\r\\n\").forEach(function (node) {\n        let indent = 0;\n        if (node.match(/.+<\\/\\w[^>]*>$/)) {\n            indent = 0;\n        } else if (node.match(/^<\\/\\w/)) {\n            if (pad != 0) {\n                pad -= 1;\n            }\n        } else if (node.match(/^<\\w[^>]*[^\\/]>.*$/)) {\n            indent = 1;\n        } else {\n            indent = 0;\n        }\n\n        let padding = \"\";\n        for (let i = 0; i < pad; i++) {\n            padding += \"  \";\n        }\n\n        formatted += padding + node + \"\\r\\n\";\n        pad += indent;\n    });\n\n    return formatted;\n}\n\nexport function getName(name: string) {\n    if (name.startsWith(\"./\")) {\n        return name;\n    }\n\n    return `./${name}`;\n}\n\nexport function aembool(b: boolean): string {\n    if (b) {\n        return \"{Boolean}true\";\n    }\n\n    return \"{Boolean}false\";\n}\n", "import { Prop } from \"./types\";\nimport { aembool, getName } from \"./utils\";\n\nexport interface BaseOptions {\n    \"granite:class\"?: string;\n}\n\nexport class AemNode {\n    readonly tag: string;\n    props: Prop[];\n    readonly children: AemNode[] = [];\n\n    constructor(tag: string, resourceType?: string, props?: Prop[]) {\n        this.props = props || [];\n        this.addProp(\"jcr:primaryType\", \"nt:unstructured\");\n        this.addProp(\"sling:resourceType\", resourceType);\n        this.tag = tag;\n    }\n\n    child(child: AemNode): AemNode {\n        this.children.push(child);\n\n        return this;\n    }\n\n    addProp(field: string, value: any) {\n        if (typeof value !== undefined) {\n            if (typeof value === \"boolean\") {\n                value = aembool(value);\n            } else if (field === \"name\") {\n                value = getName(value);\n            } else if (Array.isArray(value)) {\n                value = value.join(\", \");\n            }\n            this.props.push({ field: field, value: value });\n        }\n    }\n\n    xml(isRoot?: boolean): string {\n        let attributesString = \"\";\n\n        for (const prop of this.props) {\n            if (!prop.value) {\n                continue;\n            }\n            attributesString += ` ${prop.field}=\"${prop.value}\"`;\n        }\n\n        let output = `<${this.tag}${attributesString}`;\n        if (isRoot) {\n            output = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" + output;\n        }\n        if (this.children.length) {\n            output += \">\";\n            for (const child of this.children) {\n                output += `${child.xml(false)}`;\n            }\n            output += `</${this.tag}>`;\n        } else {\n            output += \"/>\";\n        }\n\n        return output;\n    }\n\n    /* TODO: Items should not allow duplicate items */\n    items(children?: AemNode[]): AemNode {\n        const items = new AemNode(\"items\");\n        this.child(items);\n\n        children?.forEach((c) => items.child(c));\n\n        return this;\n    }\n}\n", "// NEEDS REAL VALUES\nexport enum ResourceType {\n    DIALOG = \"cq/gui/components/authoring/dialog\",\n    TEXTFIELD = \"granite/ui/components/coral/foundation/form/textfield\",\n    CONTAINER = \"granite/ui/components/coral/foundation/container\",\n    FIXED_COLUMNS = \"granite/ui/components/coral/foundation/fixedcolumns\",\n    TABS = \"granite/ui/components/coral/foundation/tabs\",\n    CHECKBOX = \"granite/ui/components/coral/foundation/form/checkbox\",\n    PATH_FIELD = \"granite/ui/components/coral/foundation/form/pathfield\",\n    DATE_PICKER = \"granite/ui/components/coral/foundation/form/datepicker\",\n    FILE_UPLOAD = \"cq/gui/components/authoring/dialog/fileupload\",\n    NUMBER_FIELD = \"granite/ui/components/coral/foundation/form/numberfield\",\n    PATH_BROWSER = \"granite/ui/components/coral/foundation/form/pathbrowser\",\n    TEXTAREA = \"granite/ui/components/coral/foundation/form/textarea\",\n    SELECT = \"granite/ui/components/coral/foundation/form/select\",\n    FIELD = \"granite/ui/components/coral/foundation/form/field\",\n    MULTIFIELD = \"granite/ui/components/coral/foundation/form/multifield\",\n    RADIO_GROUP = \"granite/ui/components/coral/foundation/form/radiogroup\",\n}\n\nexport type Prop = {\n    field: string;\n    value: any;\n};\n\nexport type Attributes = Record<string, string>;\n", "import { AemNode } from \"./AemNode\";\nimport { formatXml } from \"./utils\";\nimport { existsSync, mkdirSync, writeFileSync } from \"fs\";\n\nexport function generate(dirPath: string, xml: AemNode) {\n    let output = xml.xml(true);\n    output = formatXml(output);\n\n    if (!existsSync(dirPath)) {\n        mkdirSync(dirPath, { recursive: true });\n    }\n    writeFileSync(`${dirPath}/.content.xml`, output, {});\n}\n"],
  "mappings": "AAAO,SAASA,EAAUC,EAAa,CACnC,IAAIC,EAAY,GACVC,EAAM,eACZF,EAAMA,EAAI,QAAQE,EAAK;AAAA,KAAY,EACnC,IAAIC,EAAM,EAEV,OAAAH,EAAI,MAAM;AAAA,CAAM,EAAE,QAAQ,SAAUI,EAAM,CACtC,IAAIC,EAAS,EACTD,EAAK,MAAM,gBAAgB,EAC3BC,EAAS,EACFD,EAAK,MAAM,QAAQ,EACtBD,GAAO,IACPA,GAAO,GAEJC,EAAK,MAAM,oBAAoB,EACtCC,EAAS,EAETA,EAAS,EAGb,IAAIC,EAAU,GACd,QAASC,EAAI,EAAGA,EAAIJ,EAAKI,IACrBD,GAAW,KAGfL,GAAaK,EAAUF,EAAO;AAAA,EAC9BD,GAAOE,CACX,CAAC,EAEMJ,CACX,CAEO,SAASO,EAAQC,EAAc,CAClC,OAAIA,EAAK,WAAW,IAAI,EACbA,EAGJ,KAAKA,GAChB,CAEO,SAASC,EAAQC,EAAoB,CACxC,OAAIA,EACO,gBAGJ,gBACX,CCvCO,IAAMC,EAAN,KAAc,CACR,IACT,MACS,SAAsB,CAAC,EAEhC,YAAYC,EAAaC,EAAuBC,EAAgB,CAC5D,KAAK,MAAQA,GAAS,CAAC,EACvB,KAAK,QAAQ,kBAAmB,iBAAiB,EACjD,KAAK,QAAQ,qBAAsBD,CAAY,EAC/C,KAAK,IAAMD,CACf,CAEA,MAAMG,EAAyB,CAC3B,YAAK,SAAS,KAAKA,CAAK,EAEjB,IACX,CAEA,QAAQC,EAAeC,EAAY,CAC3B,OAAOA,IAAU,SACb,OAAOA,GAAU,UACjBA,EAAQC,EAAQD,CAAK,EACdD,IAAU,OACjBC,EAAQE,EAAQF,CAAK,EACd,MAAM,QAAQA,CAAK,IAC1BA,EAAQA,EAAM,KAAK,IAAI,GAE3B,KAAK,MAAM,KAAK,CAAE,MAAOD,EAAO,MAAOC,CAAM,CAAC,EAEtD,CAEA,IAAIG,EAA0B,CAC1B,IAAIC,EAAmB,GAEvB,QAAWC,KAAQ,KAAK,MAChB,CAACA,EAAK,QAGVD,GAAoB,IAAIC,EAAK,UAAUA,EAAK,UAGhD,IAAIC,EAAS,IAAI,KAAK,MAAMF,IAI5B,GAHID,IACAG,EAAS,yCAA+CA,GAExD,KAAK,SAAS,OAAQ,CACtBA,GAAU,IACV,QAAWR,KAAS,KAAK,SACrBQ,GAAU,GAAGR,EAAM,IAAI,EAAK,IAEhCQ,GAAU,KAAK,KAAK,MACxB,MACIA,GAAU,KAGd,OAAOA,CACX,CAGA,MAAMC,EAA+B,CACjC,IAAMC,EAAQ,IAAId,EAAQ,OAAO,EACjC,YAAK,MAAMc,CAAK,EAEhBD,GAAU,QAASE,GAAMD,EAAM,MAAMC,CAAC,CAAC,EAEhC,IACX,CACJ,ECzEO,IAAKC,OACRA,EAAA,OAAS,qCACTA,EAAA,UAAY,wDACZA,EAAA,UAAY,mDACZA,EAAA,cAAgB,sDAChBA,EAAA,KAAO,8CACPA,EAAA,SAAW,uDACXA,EAAA,WAAa,wDACbA,EAAA,YAAc,yDACdA,EAAA,YAAc,gDACdA,EAAA,aAAe,0DACfA,EAAA,aAAe,0DACfA,EAAA,SAAW,uDACXA,EAAA,OAAS,qDACTA,EAAA,MAAQ,oDACRA,EAAA,WAAa,yDACbA,EAAA,YAAc,yDAhBNA,OAAA,ICCZ,OAAS,cAAAC,EAAY,aAAAC,EAAW,iBAAAC,MAAqB,KAE9C,SAASC,GAASC,EAAiBC,EAAc,CACpD,IAAIC,EAASD,EAAI,IAAI,EAAI,EACzBC,EAASC,EAAUD,CAAM,EAEpBN,EAAWI,CAAO,GACnBH,EAAUG,EAAS,CAAE,UAAW,EAAK,CAAC,EAE1CF,EAAc,GAAGE,iBAAwBE,EAAQ,CAAC,CAAC,CACvD",
  "names": ["formatXml", "xml", "formatted", "reg", "pad", "node", "indent", "padding", "i", "getName", "name", "aembool", "b", "AemNode", "tag", "resourceType", "props", "child", "field", "value", "aembool", "getName", "isRoot", "attributesString", "prop", "output", "children", "items", "c", "ResourceType", "existsSync", "mkdirSync", "writeFileSync", "generate", "dirPath", "xml", "output", "formatXml"]
}
