{
  "version": 3,
  "sources": ["../src/utils.ts", "../src/AemNode.ts", "../src/fields/Container.ts", "../src/fields/Multifield.ts", "../src/fields/PathField.ts", "../src/fields/Select.ts", "../src/fields/SelectOption.ts", "../src/fields/TextField.ts", "../src/generate.ts", "../src/index.ts"],
  "sourcesContent": ["export function formatXml(xml: string) {\n    let formatted = '';\n    const reg = /(>)(<)(\\/*)/g;\n    xml = xml.replace(reg, '$1\\r\\n$2$3');\n    let pad = 0;\n\n    xml.split('\\r\\n').forEach(function (node) {\n        let indent = 0;\n        if (node.match(/.+<\\/\\w[^>]*>$/)) {\n            indent = 0;\n        } else if (node.match(/^<\\/\\w/)) {\n            if (pad != 0) {\n                pad -= 1;\n            }\n        } else if (node.match(/^<\\w[^>]*[^\\/]>.*$/)) {\n            indent = 1;\n        } else {\n            indent = 0;\n        }\n\n        let padding = '';\n        for (let i = 0; i < pad; i++) {\n            padding += '  ';\n        }\n\n        formatted += padding + node + '\\r\\n';\n        pad += indent;\n    });\n\n    return formatted;\n}\n\nexport function getName(name: string) {\n    if (name.startsWith(\"./\")) {\n        return name;\n    }\n\n    return `./${name}`;\n}\n\nexport function aembool(b: boolean): string {\n    if (b) {\n        return \"{Boolean}true\";\n    }\n\n    return \"{Boolean}false\";\n}", "import { Prop } from \"./types\";\nimport { aembool, getName } from \"./utils\";\n\nexport interface BaseOptions {\n  tag?: string,\n  name?: string,\n}\n\nexport class AemNode {\n    readonly tag: string;\n    props: Prop[];\n    readonly children: AemNode[] = [];\n\n    constructor(tag: string, resourceType?: string, props?: Prop[]) {\n        this.props = props || [];\n        this.addProp(\"jcr:primaryType\", \"nt:unstructured\");\n        this.addProp(\"sling:resourceType\", resourceType);\n        this.tag = tag;\n    }\n\n    addChild(child: AemNode) {\n        this.children.push(child);\n  }\n\n    addProp(field: string, value: any) {\n        if (typeof value !== undefined) {\n            if (typeof value === \"boolean\") {\n                value = aembool(value);\n            } else if (field === \"name\") {\n                value = getName(value);\n            } else if (Array.isArray(value)) {\n                value = value.join(', ');\n            }\n            this.props.push({ field: field, value: value });\n        }\n    }\n\n    xml(isRoot?: boolean): string {\n        let attributesString = \"\";\n\n        for (const prop of this.props) {\n            if (!prop.value) {\n                continue;\n            }\n            attributesString += ` ${prop.field}=\"${prop.value}\"`;\n        }\n\n        let output = `<${this.tag}${attributesString}`;\n        if (isRoot) {\n            output = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>` + output;\n        }\n        if (this.children.length) {\n            output += `>`;\n            for (const child of this.children) {\n                output += `${child.xml(false)}`;\n            }\n            output += `</${this.tag}>`;\n        } else {\n            output += `/>`;\n        }\n\n        return output;\n    }\n\n    items(children?: AemNode[]): AemNode {\n        const items = new AemNode(\"items\");\n        this.addChild(items);\n\n        children?.forEach((c) => items.addChild(c));\n\n        return items;\n    }\n}\n", "import { AemNode, BaseOptions } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\n\nexport interface ContainerOptions extends BaseOptions {\n    name: string,\n    margin?: boolean,\n    maximized?: boolean,\n    'granite:class'?: string,\n}\nexport class Container extends AemNode {\n    options: ContainerOptions = { name: \"container\" };\n\n    constructor(options: ContainerOptions) {\n        super(options.name, ResourceType.CONTAINER);\n        for (const key in options) {\n            this.addProp(key, options[key as keyof ContainerOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface MultifieldOptions extends FieldOptions {\n    name: string,\n    composite?: boolean,\n    deleteHint?: boolean,\n    typeHint?: string,\n    required?: boolean,\n    validation?: string,\n}\nexport class Multifield extends AemNode {\n    options: MultifieldOptions = { name: 'multifield' };\n\n    constructor(options: MultifieldOptions) {\n        super(options.name, ResourceType.MULTIFIELD);\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof MultifieldOptions]);\n        }\n    }\n}", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface PathFieldOptions extends FieldOptions {\n    name: string,\n    rootPath: string,\n    emptyText?: string,\n    disabled?: boolean,\n    required?: boolean,\n    multiple?: boolean,\n    nodeTypes?: string | string[],\n    forceSelection?: boolean,\n}\nexport class PathField extends AemNode {\n    options: PathFieldOptions = { name: 'pathfield', rootPath: '/content' };\n\n    constructor(options: PathFieldOptions) {\n        super(options.name, ResourceType.PATH_FIELD);\n        for (const key in options) {\n            this.addProp(key, options[key as keyof PathFieldOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface SelectOptions extends FieldOptions {\n    name: string,\n}\nexport class Select extends AemNode {\n    options: SelectOptions = { name: 'select' };\n\n    constructor(options: SelectOptions) {\n        super(options.name, ResourceType.SELECT);\n\n        for (const key in options) {\n            this.addProp(key, options[key as keyof SelectOptions]);\n        }\n    }\n}", "import { AemNode } from \"../AemNode\";\n\nexport interface SelectOptionOptions {\n    name: string,\n    text: string,\n    value: string,\n}\nexport class SelectOption extends AemNode {\n    options: SelectOptionOptions = {\n        name: 'item',\n        text: \"Item\",\n        value: \"item\"\n    };\n\n    constructor(options: SelectOptionOptions) {\n        super(options.name, \"\");\n        for (const key in options) {\n            this.addProp(key, options[key as keyof SelectOptionOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"../AemNode\";\nimport { ResourceType } from \"../types\";\nimport { FieldOptions } from \"./Field\";\n\nexport interface TextFieldOptions extends FieldOptions {\n  emptyText?: string;\n  name: string;\n  required?: boolean;\n}\n\nexport class TextField extends AemNode {\n    options: TextFieldOptions = { name: \"text\" };\n\n    constructor(options: TextFieldOptions) {\n        super(options.name, ResourceType.TEXTFIELD);\n        for (const key in options) {\n            this.addProp(key, options[key as keyof TextFieldOptions]);\n        }\n    }\n}\n", "import { AemNode } from \"./AemNode\";\nimport { formatXml } from \"./utils\";\nimport { existsSync, mkdirSync, writeFileSync } from \"fs\";\n\nexport function generate(dirPath: string, xml: AemNode) {\n    let output = xml.xml(true);\n    output = formatXml(output);\n\n    if (!existsSync(dirPath)) {\n        mkdirSync(dirPath, { recursive: true });\n    }\n    writeFileSync(`${dirPath}/.content.xml`, output, {});\n}", "import { Container } from \"./fields/Container\";\nimport { Multifield } from \"./fields/Multifield\";\nimport { PathField } from \"./fields/PathField\";\nimport { Select } from \"./fields/Select\";\nimport { SelectOption } from \"./fields/SelectOption\";\nimport { TextField } from \"./fields/TextField\";\nimport { generate } from \"./generate\";\n\n// generate(\"./tests/pathfield\", new PathField({\n//     name: 'contentPath',\n//     rootPath: '/content/dam',\n//     nodeTypes: ['dam:Asset', 'nt:file']\n// }));\n\n// const sharedSEOTab: AemNode = createTab(1, \"SEO\", [\n//     createTextField({ name: \"seoText\" }),\n// ]);\n\n// const buttonDialog = createTabsDialog(\"Button\", [\n//     createTab(0, \"Properties\", [\n//         createTextField({\n//             name: \"buttonText\",\n//             fieldLabel: \"Button Text\",\n//             fieldDescription: \"This is the button\",\n//             required: true,\n//             emptyText: \"Enter button text here.\",\n//         }),\n//         new Checkbox({\n//             name: \"checkbox\",\n//             text: \"click this checkbox\",\n//             required: false,\n//         }),\n//     ]),\n//     sharedSEOTab,\n// ]);\n\n// const checkbox = new Checkbox({\n//     name: \"checkbox\",\n//     text: \"click this checkbox\",\n//     checked: false,\n// });\n\n// generate(\"./tests/checkbox-new\", checkbox);\n\n// generate(\"./tests/button-new\", buttonDialog);\n\n// const titleDialog = createTabsDialog(\"Title\", [\n//     createTab(0, \"Properties\", [createTextField({ name: \"titleText\" })]),\n//     sharedSEOTab,\n// ]);\n\n// generate(\"./tests/title-new\", titleDialog);\n\n/* NEED TO ADD OPTIONAL FIELD TO EXPLICITLY DECLARE NAME ATTRIBUTE */\n/* Make all booleans into custom type to allow either boolean that we convert or string (\"{Boolean}true\")? */\n\nconst select = new Select({ name: 'myselect' });\nselect.items([\n    new SelectOption({ name: 'option1', \"text\": \"Orange\", \"value\": \"--orange\" }),\n    new SelectOption({ name: 'option2', \"text\": \"Red\", \"value\": \"--red\" }),\n    new SelectOption({ name: 'option3', \"text\": \"Green\", \"value\": \"--green\" }),\n]);\ngenerate(\"./tests/select\", select);\n\nconst multi = new Multifield({ name: 'states', fieldDescription: \"Click '+' to add a new state.\", composite: true, });\nconst field = new Container({ name: \"field\", \"granite:class\": 'cmp-teaser__editor-action' });\nfield.items([\n    new TextField({\n        name: \"name\",\n        fieldLabel: \"Name\",\n        fieldDescription: \"Enter a state name\",\n        emptyText: \"Name\",\n        required: true,\n    }),\n    new PathField({\n        name: 'flag',\n        fieldLabel: \"Flag\",\n        fieldDescription: \"Select the state flag image\",\n        forceSelection: true,\n        rootPath: \"/content/dam\",\n    })\n]);\nmulti.addChild(field);\ngenerate('./tests/multi', multi);\n\n\n"],
  "mappings": "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",
  "names": ["field"]
}
